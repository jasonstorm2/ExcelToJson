/*
 * MainWindow.java
 *
 * Created on __DATE__, __TIME__
 */

package game.tool.windows;

import java.awt.Desktop;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.awt.dnd.DnDConstants;
import java.awt.dnd.DropTarget;
import java.awt.dnd.DropTargetDragEvent;
import java.awt.dnd.DropTargetDropEvent;
import java.awt.dnd.DropTargetEvent;
import java.awt.dnd.DropTargetListener;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;
import javax.swing.JTextArea;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;

import game.tool.excel.CustomRun;
import game.tool.excel.ExcelTo;
import game.tool.excel.ExcelToClient;
import game.tool.excel.ExcelToPhone;
import game.tool.excel.ExcelToServer;

/**
 *
 * @author __USER__
 */
public class MainWindow extends DropDragJFrame {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	/** Creates new form MainWindow */
	public MainWindow() {
		initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
	 * content of this method is always regenerated by the Form Editor.
	 */
	// GEN-BEGIN:initComponents
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents() {

		editConf = new javax.swing.JCheckBox();
		serverText = new javax.swing.JLabel();
		saveDataText = new javax.swing.JLabel();
		serverPath = new javax.swing.JTextField();
		clientText = new javax.swing.JLabel();
		clientPath = new javax.swing.JTextField();
		javaText = new javax.swing.JLabel();
		entityPath = new javax.swing.JTextField();
		confText = new javax.swing.JLabel();
		confPath = new javax.swing.JTextField();
		packagePath = new javax.swing.JTextField();
		packageText = new javax.swing.JLabel();
		jLabel7 = new javax.swing.JLabel();
		jScrollPane1 = new javax.swing.JScrollPane();
		showMsg = new DropDragJTextArea();
		saveConf = new javax.swing.JButton();
		freemakerText = new javax.swing.JLabel();
		freemakerPath = new javax.swing.JTextField();
		jLabel1 = new javax.swing.JLabel();
		jLabel2 = new javax.swing.JLabel();
		jLabel3 = new javax.swing.JLabel();
		phonePath = new javax.swing.JTextField();
		phoneJsonPath = new javax.swing.JTextField();
		jButton1 = new DropDragButton("client");
		jButton2 = new DropDragButton("server");
		jButton3 = new DropDragButton("phone");
		
		comboBox = new JComboBox<String>();
		comboBox.addItem("zhCN");  
        comboBox.addItem("enUS");  

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
		setTitle("\u914d\u7f6e\u5bfc\u5165\u7cfb\u7edf V1.1.1");

		editConf.setText("\u4fee\u6539\u914d\u7f6e\u4fe1\u606f");
		editConf.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				editConfActionPerformed(evt);
			}
		});

		serverText.setText("\u670d\u52a1\u5668");

		saveDataText.setText("\u203b \u6570\u636e\u4fdd\u5b58\u8def\u5f84");

		serverPath.setText("d:\\server\\");

		clientText.setText("\u5ba2\u6237\u7aef");

		clientPath.setText("d:\\client\\");

		javaText.setText("Java\u5b9e\u4f53");

		entityPath.setText("d:\\java\\");

		confText.setText("\u203b \u6e38\u620f\u914d\u7f6e\u6587\u4ef6\u5b58\u653e\u8def\u5f84(\u5373Excel\u5b58\u653e\u8def\u5f84)");

		confPath.setText("d:\\conf\\");

		packagePath.setText("com.pwrd.conf.entity");

		jButton1.setText("\u751f\u6210\u5ba2\u6237\u7aef\u6570\u636e");
		jButton1.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButton1ActionPerformed(evt);
			}
		});

		packageText.setText("Java包");

		jLabel7.setText("\u5904\u7406\u65e5\u5fd7\uff1a");

		showMsg.setColumns(20);
		showMsg.setRows(5);
		jScrollPane1.setViewportView(showMsg);

		saveConf.setLabel("\u4fdd\u5b58\u914d\u7f6e");
		saveConf.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				saveConfActionPerformed(evt);
			}
		});

		showMsg.setText("Q & A");
		showMsg.append("\n Q: 会卡吗？ \n A: 看看哦");
		showMsg.append("\n Q: 布尔数值类型默认是什么？ \n A: False");
		showMsg.append("\n Q: String数值类型默认是什么？ \n A: 空字符串\"\"");
		showMsg.append("\n Q: JSON如果不填,默认值是什么？ \n A: 默认值是 \"{}\"");
		showMsg.append("\n Q: 布尔数值可以填1或0这样的数值吗？ \n A:可以,0代表False,1代表True");
		showMsg.append("\n Q: Excel文件Sheet名称有什么规则吗？ \n A: 规则为\"Test|测试\",不符合的将不会生成,请将英文的首字母大写!");
		showMsg.append("\n Q: 可以有多个同名的Sheet吗？如果有,会怎么生成？ \n A: 可以有,同名的Sheet将会生成到同一个文件中,请保证多张同名Sheet中的SN不要重复");
		showMsg.append("\n Q: 我想加点注释在配置旁边可以吗？ \n A: 可以,只要不填头文件的配置,都不会生成");
		showMsg.append("\n Q: 我不填SN,数据能生成吗？ \n A: 会!不填SN,虽然会有错误提示,但会生成JSON文件,正式数据中,请不要这样做!");

		freemakerText.setText("\u203b \u7cfb\u7edf\u914d\u7f6e\u8def\u5f84");

		freemakerPath.setText("");

		jButton2.setText("\u751f\u6210\u670d\u52a1\u5668\u7aef\u6570\u636e");
		jButton2.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButton2ActionPerformed(evt);
			}
		});

		jLabel1.setText("\u624b\u673a\u7aef");

		jLabel2.setText("\u624b\u673a\u7aefJSON");
		
		jLabel3.setText("\u9009\u62e9\u751f\u6210\u8bed\u8a00");


		phonePath.setText("jTextField1");

		phoneJsonPath.setText("jTextField2");

		jButton3.setText("\u751f\u6210\u624b\u673a\u7aef\u6570\u636e");
		jButton3.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButton3ActionPerformed(evt);
			}
		});

		showMsg.addMouseListener(new MouseAdapter() {
			public void mousePressed(MouseEvent e) {
				if (e.getButton() == 3) {
					showRightMenu(e);
				}
			}
		});

		// 添加ESC 中断处理
		showMsg.addKeyListener(new KeyListener() {
			public void keyPressed(KeyEvent e) {
				if (e.getKeyCode() == KeyEvent.VK_ESCAPE && et != null) {
					if (et != null && et.isAlive()) {
						et.escap = true;
					}
					showMsg.append("\n 执行被中断了 \n\n");
					showMsg.setCaretPosition(showMsg.getText().length());
				}
			}

			@Override
			public void keyTyped(KeyEvent e) {

			}

			@Override
			public void keyReleased(KeyEvent e) {
			}
		});

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						javax.swing.GroupLayout.Alignment.TRAILING,
						layout.createSequentialGroup()
								.addContainerGap()
								.addGroup(
										layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
												.addComponent(editConf, javax.swing.GroupLayout.Alignment.LEADING)	
												
												.addGroup(
														layout.createSequentialGroup()
																.addGap(41, 41, 41)
																.addGroup(
																		layout.createParallelGroup(
																				javax.swing.GroupLayout.Alignment.TRAILING)
																				.addComponent(serverText)
																				.addComponent(clientText)
																				.addComponent(javaText)
																				.addComponent(packageText)
																				.addComponent(jLabel1)
																				.addComponent(jLabel2))
																.addGap(12, 12, 12)
																.addGroup(
																		layout.createParallelGroup(
																				javax.swing.GroupLayout.Alignment.LEADING)
																				.addComponent(
																						phoneJsonPath,
																						javax.swing.GroupLayout.DEFAULT_SIZE,
																						653, Short.MAX_VALUE)
																				.addComponent(
																						phonePath,
																						javax.swing.GroupLayout.DEFAULT_SIZE,
																						653, Short.MAX_VALUE)
																				.addComponent(
																						clientPath,
																						javax.swing.GroupLayout.DEFAULT_SIZE,
																						653, Short.MAX_VALUE)
																				.addComponent(
																						serverPath,
																						javax.swing.GroupLayout.DEFAULT_SIZE,
																						653, Short.MAX_VALUE)
																				.addComponent(
																						entityPath,
																						javax.swing.GroupLayout.DEFAULT_SIZE,
																						653, Short.MAX_VALUE)
																				.addComponent(
																						packagePath,
																						javax.swing.GroupLayout.DEFAULT_SIZE,
																						653, Short.MAX_VALUE)																				
																		))
												
												.addGroup(
														javax.swing.GroupLayout.Alignment.LEADING,
														layout.createSequentialGroup()
																.addGap(21, 21, 21)
																.addGroup(
																		layout.createParallelGroup(
																				javax.swing.GroupLayout.Alignment.LEADING)
																				.addGroup(
																						layout.createSequentialGroup()
																								.addGap(10, 10, 10)
																								.addComponent(
																										confPath,
																										javax.swing.GroupLayout.DEFAULT_SIZE,
																										743,
																										Short.MAX_VALUE))
																				.addComponent(saveDataText)
																				.addComponent(jLabel7)
																				.addGroup(
																						javax.swing.GroupLayout.Alignment.TRAILING,
																						layout.createSequentialGroup()
																								.addComponent(jButton1)
																								.addPreferredGap(
																										javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																								.addComponent(jButton2)
																								.addPreferredGap(
																										javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																								.addComponent(jButton3)
																								
																								.addPreferredGap(
																										javax.swing.LayoutStyle.ComponentPlacement.RELATED,
																										295,
																										Short.MAX_VALUE)
																								.addComponent(jLabel3)
																								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																								.addComponent(comboBox)
																								.addComponent(saveConf))
																				.addComponent(freemakerText)
																				.addGroup(
																						layout.createSequentialGroup()
																								.addGap(10, 10, 10)
																								.addComponent(
																										freemakerPath,
																										javax.swing.GroupLayout.DEFAULT_SIZE,
																										743,
																										Short.MAX_VALUE))
																				.addComponent(confText)
																				.addComponent(
																						jScrollPane1,
																						javax.swing.GroupLayout.DEFAULT_SIZE,
																						753, Short.MAX_VALUE))))
								.addGap(44, 44, 44)));
		layout.setVerticalGroup(layout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						layout.createSequentialGroup()
								.addContainerGap()
								.addComponent(editConf)
								
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addComponent(saveDataText)
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addGroup(
										layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
												.addComponent(serverText)
												.addComponent(serverPath, javax.swing.GroupLayout.PREFERRED_SIZE,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														javax.swing.GroupLayout.PREFERRED_SIZE))
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addGroup(
										layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
												.addComponent(clientText)
												.addComponent(clientPath, javax.swing.GroupLayout.PREFERRED_SIZE,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														javax.swing.GroupLayout.PREFERRED_SIZE))
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addGroup(
										layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
												.addComponent(javaText)
												.addComponent(entityPath, javax.swing.GroupLayout.PREFERRED_SIZE,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														javax.swing.GroupLayout.PREFERRED_SIZE))
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addGroup(
										layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
												.addComponent(packagePath, javax.swing.GroupLayout.PREFERRED_SIZE,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														javax.swing.GroupLayout.PREFERRED_SIZE)
												.addComponent(packageText))
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addGroup(
										layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(jLabel1)
												.addComponent(phonePath, javax.swing.GroupLayout.PREFERRED_SIZE,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														javax.swing.GroupLayout.PREFERRED_SIZE))
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addGroup(
										layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
												.addComponent(phoneJsonPath, javax.swing.GroupLayout.PREFERRED_SIZE,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(jLabel2))
//								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)						
								
								.addGap(20, 20, 20)
								.addComponent(confText)
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addComponent(confPath, javax.swing.GroupLayout.PREFERRED_SIZE, 23,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addGap(2, 2, 2)
								.addComponent(freemakerText)
								.addGap(3, 3, 3)
								.addComponent(freemakerPath, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addGroup(
										layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
												.addGroup(
														layout.createSequentialGroup()
																.addGap(32, 32, 32)
																.addGroup(
																		layout.createParallelGroup(
																				javax.swing.GroupLayout.Alignment.BASELINE)
																				.addComponent(jButton1)
																				.addComponent(jButton2)
																				.addComponent(jButton3)
																				.addComponent(jLabel3)
																				.addComponent(comboBox))
																
																.addPreferredGap(
																		javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																.addComponent(jLabel7))
												.addGroup(
														layout.createSequentialGroup().addGap(9, 9, 9)
																.addComponent(saveConf)))
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 322, Short.MAX_VALUE)));

		confText.getAccessibleContext()
				.setAccessibleName(
						"\u203b\u6e38\u620f\u914d\u7f6e\u6587\u4ef6\u5b58\u653e\u8def\u5f84(\u5373Excel\u5b58\u653e\u8def\u5f84)");
		saveConf.getAccessibleContext().setAccessibleName("\u4fdd\u5b58");

		this.initConf();
		pack();
	}// </editor-fold>
		// GEN-END:initComponents

	/**
	 * 右键菜单
	 * 
	 * @param e
	 */
	public void showRightMenu(MouseEvent e) {
		List<String> errorList = ExcelTo.errorFiles;

		if (errorList == null || errorList.isEmpty())
			return;

		JPopupMenu menu = new JPopupMenu();
		for (String str : errorList) {
			JMenuItem item = new JMenuItem("打开 " + str);
			// 添加打开事件
			item.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent e) {
					openFile(e.getActionCommand());
				}
			});
			menu.add(item);
		}

		menu.show(e.getComponent(), e.getX(), e.getY());
	}

	// 打开错误文件
	private void openFile(String fileName) {
		fileName = fileName.replace("打开 ", "");
		Desktop desk = Desktop.getDesktop();
		try {
			File file = new File(fileName);
			if (file.exists())
				desk.open(file);
		} catch (Exception e) {
			e.printStackTrace();
			showMsg.append("\n\n打开文件错误：" + e.getMessage() + "\n");
		}
	}

	/**
	 * 手机端
	 * 
	 * @param evt
	 */
	private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {
		showMsg.setText("");

		et = new ExcelToPhone(path + "/" + confPath.getText(), path + "/" + phonePath.getText(), path + "/"
				+ freemakerPath.getText(), showMsg, packagePath.getText(),(String)comboBox.getSelectedItem());

		et.start();
	}

	/**
	 * 生成服务器端
	 */
	private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {
		showMsg.setText("");

		et = new ExcelToServer(
				path + "/" + confPath.getText(),   //配置文件所在路径(要解析的Excel路径)
				path + "/" + serverPath.getText(), //数据和生成的java类的路径
				path + "/"	+ freemakerPath.getText(), //模板路径
				showMsg, 
				packagePath.getText(),(String)comboBox.getSelectedItem());

		et.start();
	}

	/**
	 * 生成客户端
	 * 
	 * @param evt
	 */
	private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {
		showMsg.setText("");

		et = new ExcelToClient(path + "/" + confPath.getText(), path + "/" + clientPath.getText(), path + "/"
				+ freemakerPath.getText(), showMsg, packagePath.getText(),(String)comboBox.getSelectedItem());

		et.start();
	}

	/**
	 * 读取配置文件
	 * 
	 * @return
	 */
	public static JSONObject readConfigFile() {
		String sysConfPath = "config/";
		File file = new File(System.getProperty("user.dir") + "/" + sysConfPath + "config.conf");
		JSONObject json = null;
		if (file.exists()) {
			try {
				FileReader reader = new FileReader(file);
				int length = 0;
				char[] byteInData = new char[300];
				String conf = "";
				while ((length = reader.read(byteInData)) != -1) {
					conf = new String(byteInData, 0, length);
				}
				json = JSON.parseObject(conf);
				reader.close();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		return json;
	}

	/**
	 * 初始化工作
	 */
	private void initConf() {
		// 隐藏所有配置
		serverPath.setVisible(false);
		clientPath.setVisible(false);
		entityPath.setVisible(false);
		packagePath.setVisible(false);
		confPath.setVisible(false);
		saveConf.setVisible(false);
		freemakerPath.setVisible(false);
		saveDataText.setVisible(false);
		serverText.setVisible(false);
		clientText.setVisible(false);
		javaText.setVisible(false);
		packageText.setVisible(false);
		confText.setVisible(false);
		freemakerText.setVisible(false);
		saveConf.setVisible(false);
		phonePath.setVisible(false);
		phoneJsonPath.setVisible(false);
		jLabel1.setVisible(false);
		jLabel2.setVisible(false);	
		String sysConfPath = "config/";

		File file = new File(System.getProperty("user.dir") + "/" + sysConfPath + "config.conf");

		if (file.exists()) {
			try {

				JSONObject json = MainWindow.readConfigFile();
				serverPath.setText(json.getString("serverPath"));
				clientPath.setText(json.getString("clientPath"));
				entityPath.setText(json.getString("entityPath"));
				packagePath.setText(json.getString("entityPackage"));
				confPath.setText(json.getString("confPath"));
				freemakerPath.setText(json.getString("freemakerPath"));
				phonePath.setText(json.getString("phonePath"));
				phoneJsonPath.setText(json.getString("phoneJsonPath"));

				super.showMsg = this.showMsg;

				this.setLittleTips();
			} catch (Exception e) {
				e.printStackTrace();
				showMsg.append("===读取配置文件失败," + e.getMessage() + "\n");
			}
		}
	}

	private void setLittleTips() {

	}

	/**
	 * 保存配置
	 * 
	 * @param evt
	 */
	private void saveConfActionPerformed(java.awt.event.ActionEvent evt) {
		Map<String, String> map = new HashMap<String, String>();
		String sysConfPath = "config/";

		File file = new File(System.getProperty("user.dir") + "/" + sysConfPath + "config.conf");

		try {
			if (!file.exists())
				file.createNewFile();

			FileWriter writer = new FileWriter(file, false);
			map.put("serverPath", serverPath.getText());
			map.put("clientPath", clientPath.getText());
			map.put("entityPath", entityPath.getText());
			map.put("entityPackage", packagePath.getText());
			map.put("confPath", confPath.getText());
			map.put("freemakerPath", freemakerPath.getText());
			map.put("phonePath", phonePath.getText());
			map.put("phoneJsonPath", phoneJsonPath.getText());

			writer.write(JSON.toJSONString(map));
			writer.flush();
			writer.close();
			showMsg.append("\n保存配置文件成功\n");
		} catch (IOException e) {
			e.printStackTrace();
			showMsg.append("\n保存配置文件失败," + e.getMessage() + "\n");
		}
	}

	/**
	 * 隐藏/显示 配置
	 * 
	 * @param evt
	 */
	private void editConfActionPerformed(java.awt.event.ActionEvent evt) {
		if (editConf.isSelected()) {
			serverPath.setVisible(true);
			clientPath.setVisible(true);
			entityPath.setVisible(false);
			packagePath.setVisible(true);
			confPath.setVisible(true);
			saveConf.setVisible(true);
			freemakerPath.setVisible(true);
			saveDataText.setVisible(true);
			serverText.setVisible(true);
			clientText.setVisible(true);
			javaText.setVisible(false);
			packageText.setVisible(true);
			confText.setVisible(true);
			freemakerText.setVisible(true);
			saveConf.setVisible(true);
			phonePath.setVisible(true);
			phoneJsonPath.setVisible(true);
			jLabel1.setVisible(true);
			jLabel2.setVisible(true);
		} else {
			serverPath.setVisible(false);
			clientPath.setVisible(false);
			entityPath.setVisible(false);
			packagePath.setVisible(false);
			confPath.setVisible(false);
			saveConf.setVisible(false);
			freemakerPath.setVisible(false);
			saveDataText.setVisible(false);
			serverText.setVisible(false);
			clientText.setVisible(false);
			javaText.setVisible(false);
			packageText.setVisible(false);
			confText.setVisible(false);
			freemakerText.setVisible(false);
			saveConf.setVisible(false);
			phonePath.setVisible(false);
			phoneJsonPath.setVisible(false);
			jLabel1.setVisible(false);
			jLabel2.setVisible(false);
		}
	}

	/**
	 * @param args
	 *            the command line arguments
	 */
	public static void main(String args[]) {
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new MainWindow().setVisible(true);
			}
		});
	}

	// GEN-BEGIN:variables
	// Variables declaration - do not modify
	public javax.swing.JTextField clientPath;
	private javax.swing.JLabel clientText;
	public javax.swing.JTextField confPath;
	private javax.swing.JLabel confText;
	private javax.swing.JCheckBox editConf;
	private javax.swing.JTextField entityPath;
	public javax.swing.JTextField freemakerPath;
	private javax.swing.JLabel freemakerText;
	private javax.swing.JButton jButton1;
	private javax.swing.JButton jButton2;
	private javax.swing.JButton jButton3;
	private javax.swing.JLabel jLabel1;
	private javax.swing.JLabel jLabel2;
	private javax.swing.JLabel jLabel3;
	private javax.swing.JComboBox<String> comboBox;
	private javax.swing.JLabel jLabel7;
	private javax.swing.JScrollPane jScrollPane1;
	public javax.swing.JTextField phonePath;
	private javax.swing.JTextField phoneJsonPath;
	private javax.swing.JLabel javaText;
	public javax.swing.JTextField packagePath;
	private javax.swing.JLabel packageText;
	private javax.swing.JButton saveConf;
	private javax.swing.JLabel saveDataText;
	public javax.swing.JTextField serverPath;
	private javax.swing.JLabel serverText;
	private javax.swing.JTextArea showMsg;
	// public ExcelUtil eu; 老代码
	public ExcelTo et;	

	// End of variables declaration//GEN-END:variables

	public class DropDragJTextArea extends JTextArea implements DropTargetListener {

		public DropDragJTextArea() {
			new DropTarget(this, DnDConstants.ACTION_COPY_OR_MOVE, this);
		}

		/**
		 * 
		 */
		private static final long serialVersionUID = 1L;

		@Override
		public void dragEnter(DropTargetDragEvent dtde) {
			showMsg.setText("\n \t生成 <客户端> <服务器> <手机端> 文件");
		}

		@Override
		public void dragOver(DropTargetDragEvent dtde) {

		}

		@Override
		public void dropActionChanged(DropTargetDragEvent dtde) {

		}

		@Override
		public void dragExit(DropTargetEvent dte) {
			showMsg.setText("");
		}

		@Override
		public void drop(DropTargetDropEvent dtde) {
			showMsg.setText("");
			if (dtde.isDataFlavorSupported(DataFlavor.javaFileListFlavor)) {
				dtde.acceptDrop(DnDConstants.ACTION_COPY_OR_MOVE);

				try {
					@SuppressWarnings("unchecked")
					List<File> list = (List<File>) (dtde.getTransferable()
							.getTransferData(DataFlavor.javaFileListFlavor));
					File[] files = (File[]) list.toArray();
					// 客户端
					CustomRun client = new CustomRun("client", showMsg, files, path + "/" + confPath.getText(), path
							+ "/" + clientPath.getText(), path + "/" + freemakerPath.getText(), packagePath.getText(),(String)comboBox.getSelectedItem());
					client.run();

					// 服务器
					CustomRun server = new CustomRun("server", showMsg, files, path + "/" + confPath.getText(), path
							+ "/" + serverPath.getText(), path + "/" + freemakerPath.getText(), packagePath.getText(),(String)comboBox.getSelectedItem());
					server.run();

					// 手机端
					CustomRun phone = new CustomRun("phone", showMsg, files, path + "/" + confPath.getText(), path
							+ "/" + phonePath.getText(), path + "/" + freemakerPath.getText(), packagePath.getText(),(String)comboBox.getSelectedItem());
					phone.run();

				} catch (UnsupportedFlavorException | IOException e) {
					e.printStackTrace();
				}
			}
		}
	}

	public class DropDragButton extends JButton implements DropTargetListener {
		private String buttonType;

		/**
		 * 
		 */
		private static final long serialVersionUID = 1L;

		public DropDragButton(String buttonType) {
			this.buttonType = buttonType;
			new DropTarget(this, DnDConstants.ACTION_COPY_OR_MOVE, this, true);
		}

		@Override
		public void dragEnter(DropTargetDragEvent dtde) {
			switch (buttonType) {
			case "client": {
				showMsg.setText("\n \t生成 <客户端> 文件");
				break;
			}
			case "server": {
				showMsg.setText("\n \t生成 <服务器> 文件");
				break;
			}
			case "phone": {
				showMsg.setText("\n \t生成 <手机端> 文件");
				break;
			}
			default: {

			}
			}

		}

		@Override
		public void dragOver(DropTargetDragEvent dtde) {

		}

		@Override
		public void dropActionChanged(DropTargetDragEvent dtde) {

		}

		@Override
		public void dragExit(DropTargetEvent dte) {
			showMsg.setText("");
		}

		@Override
		public void drop(DropTargetDropEvent dtde) {
			showMsg.setText("");
			if (dtde.isDataFlavorSupported(DataFlavor.javaFileListFlavor)) {
				dtde.acceptDrop(DnDConstants.ACTION_COPY_OR_MOVE);

				try {
					@SuppressWarnings("unchecked")
					List<File> list = (List<File>) (dtde.getTransferable()
							.getTransferData(DataFlavor.javaFileListFlavor));
					File[] files = (File[]) list.toArray();
					switch (buttonType) {
					case "client": {
						// 客户端
						CustomRun client = new CustomRun("client", showMsg, files, path + "/" + confPath.getText(),
								path + "/" + clientPath.getText(), path + "/" + freemakerPath.getText(),
								packagePath.getText(),(String)comboBox.getSelectedItem());
						client.run();
						break;
					}
					case "server": {
						// 服务器
						CustomRun server = new CustomRun("server", showMsg, files, path + "/" + confPath.getText(),
								path + "/" + serverPath.getText(), path + "/" + freemakerPath.getText(),
								packagePath.getText(),(String)comboBox.getSelectedItem());
						server.run();
						break;
					}
					case "phone": {
						CustomRun phone = new CustomRun("phone", showMsg, files, path + "/" + confPath.getText(), path
								+ "/" + phonePath.getText(), path + "/" + freemakerPath.getText(),
								packagePath.getText(),(String)comboBox.getSelectedItem());
						phone.run();
						break;
					}
					default:
						break;
					}
				} catch (UnsupportedFlavorException | IOException e) {
					e.printStackTrace();
				}
			}
		}
	}
}